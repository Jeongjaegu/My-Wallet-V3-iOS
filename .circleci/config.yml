#
#  .circleci/config.yml
#  Blockchain
#
#  Created by Maurice A. on 10/1/18.
#  Copyright © 2018 Blockchain Luxembourg S.A. All rights reserved.
#
#  Run commands are executed using non-login shells by default,
#  so you must explicitly source any dotfiles as part of the command.
#  It’s possible to specify a multi-line command, each line of which will be run in the same shell.
#
#  It is currently not possible to delete the cache in CircleCI 2.0
#  Workaround: rename the cache key to force generation of a new cache.
#
#  Environment variables are defined in the project settings on circleci.com.
#
#  The setup_circle_ci Fastlane action must be in the before_all block to perform the following actions:
#  - Create a new temporary keychain for use with Fastlane Match (see the code signing section for more details).
#  - Switch Fastlane Match to readonly mode to make sure CI does not create new code signing certificates or provisioning profiles.
#  - Set up log and test result paths to be easily collectible.
#

version: 2
jobs:
  build:
    working_directory: ~/project
    macos:
      xcode: "10.0.0"
    environment:
      # Specifies which environment Fastlane should build against.
      FASTLANE_LANE: dev
      FL_OUTPUT_DIR: output

    # Use the error status of the first failure, rather than that of the last item in a pipeline.
    shell: /bin/bash --login -o pipefail

    steps:
      - restore_cache:
          keys:
            - node-cache-{{ .Environment.NODE_VERSION }}
      - run:
          name: Install Node
          command: |
            cd ~
            git clone https://github.com/creationix/nvm.git .nvm
            cd .nvm && git checkout v0.33.11 && . nvm.sh
            nvm install $NODE_VERSION && nvm use $NODE_VERSION
            if [[ $(npm -v | grep -v "5.6.0") ]]; then npm install -g npm@5.6.0; fi
      - save_cache:
          key: node-cache-{{ .Environment.NODE_VERSION }}
          paths:
            - ~/.nvm
            - /usr/local/lib/node_modules
      - checkout
      - run:
          name: Initialize Submodules
          command: git submodule update --init
      - run:
          name: Build JS
          command: |
            . ~/.nvm/nvm.sh
            sh scripts/install-js.sh
            sh scripts/build-js.sh
      - restore_cache:
          keys:
            - openssl-cache-{{ .Environment.TARGET_IOS_SDK_VERSION }}
      - run:
          name: Build OpenSSL
          command: |
            if [ ! -d "./Submodules/OpenSSL-for-iPhone/bin" ]; then
              cd Submodules/OpenSSL-for-iPhone
              sh build-libssl.sh --cleanup
            fi
      - save_cache:
          key: openssl-cache-{{ .Environment.TARGET_IOS_SDK_VERSION }}
          paths:
            - ~/project/Submodules/OpenSSL-for-iPhone
      - restore_cache:
          keys:
            - gems-cache-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Gems
          command: |
            sudo gem install bundler
            bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: gems-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          keys:
            - pods-cache-{{ checksum "Podfile.lock" }}
      - run:
          name: Install Pods
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
            pod install --verbose
      - save_cache:
          key: pods-cache-{{ checksum "Podfile.lock" }}
          paths:
            - ~/.cocoapods
      - run:
          name: Fastlane
          command: |
            export LANG=en_US.UTF-8
            export LC_ALL=en_US.UTF-8
            sudo gem install fastlane
            bundle exec fastlane $FASTLANE_LANE
      - run:
          name: Codesign info
          command: security find-identity -v -p codesigning
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan